    voxel 1d storage:
    -----------------
    current choice: XZY order.
    - as block index increases, the x-coordinate increases fastest, then the z-coordinate, then the y-coordinate. 

    explanation:
    - this is complicated.
    
    some background on how minecraft stores blocks:
    - minecraft's world uses a Y-up coordinate system.
    - minecraft chunks are 16 x 384 x 16 (x,y,z) blocks with a 64 block offset in the Y-dimension.
    - y=-64 is the bottom of the world.
    - millions of players are used to the minecraft coordinate system via console commands and debug overlays,
      so it would be unpopular to change minecraft or a fairly compatible voxel game to use a Z-up coordinate system.
    - you could internally use z-up coordinates and convert to y-up coordinates when presenting information to players.
    - but this could be confusing when devs and players communicate.

    chunks:
    - a chunk is relatively tall (384) compared to its width and depth (16x16).
    - two ways to think of a chunk depending on if you store blocks in x, y, z order or x, z, y order.
        - a stack of 384 floors like in an office building. (384 layers that are 16x16 each)
        - or 16 tall planks lined up one after the other. (16 slices that are 16x384 each)

    storage order:
    - so should a chunk be stored as a 1D array in x, y, z order or x, z, y order?
        - 384 layers or 16 slices?
    - You might consider the Y-dimension (height) to be the least frequently changing dimension,
    - as vertical traversal is typically less common than horizontal traversal.
    - this choice would mean as block index increases:
        the x-coordinate increases first (inner loop),
        then the z-coordinate (middle loop),
        then the y-coordinate (outer loop).
    - However developers usually form nested loops in the order of z, y, x. which could be confusing.
    - ideally you could support both storage orders and profile each to see which performs better.

     my thoughts:
     1.) I like the idea of storing blocks in layers that are 16x16. rather than slices that are 16x384.
     2.) The idea that horizontal traversal is more common than vertical traversal seems logical.
     3.) ultimately profiling should really be the decider, but I'm going to go with storage in x, z, y order for now.

    - so as block index increases, the x-coordinate increases first, then the z-coordinate, then the y-coordinate.
    - imagine filling a chunk from the 0,0,0 first blocks add to the right(x), then forward (z), then up (y).

    the names for these two storage orders are:
    - x, y, z order: "row major order"
    - x, z, y order: "slice major order"



other notes pulled from chunk2.h:
// A chunk of blocks in the world
//  - Think of a chunk as an image and a block as a pixel
//  - This is the primary data type of the voxel engine.

// The world is made up of many chunks.
//  - Imagine image editing software that allowed editing an virtual image of infinite size.
//  - The virtual image is made up of many smaller images (chunks).
//  - as you draw pixels on the virtual image, the software automatically creates new chunks as needed.

// see: coords.h for notes storage order and indexing



stale code from when I was working on this, just saving for reference:
--------------------------------------------------------------------------------

    // Get 1D index from 3D coordinates
    inline static size_t GetBlock1DIndex(int x, int y, int z)
    {
        return x + CHUNK_SIZE_X * (z + CHUNK_SIZE_Z * y);
    }
        
    int LocalCoordsToIndex1D(const int x, const int y, const int z)
    {
        int ZRowIndex = z * CHUNK_SIZE_X;
        int YSliceIndex = y * CHUNK_XZ_LAYER_SIZE;
        return YSliceIndex + ZRowIndex + x;
    }

    // this version assumes blocks are stored in a 1D array in the following way: x, z, y
    // - the X-dimension (width) is the most frequently changing dimension, so it is the innermost loop.
    // - the Z-dimension (depth) is the next most frequently changing dimension, so it is the middle loop.
    // - the Y-dimension (height) is the least frequently changing dimension, so it is the outermost loop.
    void Index1DToLocalCoords(const int index1D, int& x, int& y, int& z)
    {
        // think of a chunk as a tall building.
        // each floor of the building is a layer of blocks.
        // each layer has a number of rows that increase with depth (rows are CHUNK_SIZE_X wide),
        // and columns that increase with width (columns are CHUNK_SIZE_Z deep).

        // get which layer this block is on,
        y = index1D / CHUNK_XZ_LAYER_SIZE;  

        // get the index into the "layer image" which has coords of x and z
        int indexIntoLayerImage = index1D % CHUNK_XZ_LAYER_SIZE;

        // get which row this block is on in the layer image
        z = indexIntoLayerImage / CHUNK_SIZE_X;

        // get the index into the row which is the x coord
        x = indexIntoLayerImage % CHUNK_SIZE_X;
    }

    void Index1DToLocalCoords2(const int Index1D, int& x, int& y, int& z)
    {
        // in this version I'm going to think of a chunk as a loaf of bread or 3D image.
        // each z slice of bread contains an XY "image" and the blocks are the pixels of that image.

        int IMAGE_SIZE = CHUNK_SIZE_X * CHUNK_SIZE_Y;
        int ROW_WIDTH = CHUNK_SIZE_X;

        int IndexIntoChunk = Index1D;
        int IndexIntoImage = Index1D % IMAGE_SIZE;
        int IndexIntoRow = Index1D % ROW_WIDTH;
        
        z = IndexIntoChunk / IMAGE_SIZE;
        y = IndexIntoImage / ROW_WIDTH;
        x = IndexIntoRow;
    }
 